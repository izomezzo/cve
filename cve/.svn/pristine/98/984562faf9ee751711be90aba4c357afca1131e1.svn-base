package politse.test;

import static org.junit.Assert.*;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.ejb.EJBException;
import javax.ejb.Stateful;
import javax.ejb.embeddable.EJBContainer;
import javax.enterprise.context.RequestScoped;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.osgi.service.jpa.EntityManagerFactoryBuilder;

import politse.ejb.LoginRequest;
import politse.ejb.OrderMonitorBean;
import politse.ejb.RequestBean;
import politse.entity.AskOrder;
import politse.entity.BidOrder;
import politse.entity.OrderBook;
import politse.entity.OrderBookKey;
import politse.entity.Portfolio;
import politse.entity.Trader;
import politse.entity.User;
import politse.util.TraderException;

@RequestScoped
@Stateful
public class CreateOrderBookTest {
	
	private RequestBean requestBean;
	private EJBContainer ejbContainer;
	private Context ctx;
	//@PersistenceContext
     private EntityManager em;
     private EntityManagerFactory emf;
	private LoginRequest loginRequest;

	@Before
	public void setUp() throws Exception {
		ejbContainer = EJBContainer.createEJBContainer();
        System.out.println("Opening the container" );
        ctx = ejbContainer.getContext();
        emf = Persistence.createEntityManagerFactory("politse");
        em = emf.createEntityManager();
       /* EntityManagerFactory emf = (EntityManagerFactory) new InitialContext().lookup("java:comp/env/jpa/politse");
        EntityManager em = (EntityManager) new InitialContext().lookup("java:comp/env/jpa/politse");*/

	}

	@After
	public void tearDown() throws Exception {
		 em.close();
		 emf.close();
		 ejbContainer.close();
	     System.out.println("Closing the container" );
	     //TODO teardown database
	}

	@Test
	public void testCreateBidOrder() throws NamingException {
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        
        try{
        	requestBean.createBidOrder(50, 1.0, "CLCS", "00001");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
        Trader trader = em.find(Trader.class, new Integer("00001"));
        Collection<BidOrder> bidOrders = trader.getBidOrders(); //FIXME: BidOrder join table not populated
        System.out.println("bidOrders.size() " + bidOrders.size());
        assertTrue(bidOrders.size() > 0);
       
        Iterator<BidOrder> iter = bidOrders.iterator();
        while(iter.hasNext()){
        	BidOrder order = iter.next();
        	assertEquals(order.getAmount(),new Integer(50));
        	assertEquals(order.getMember().getMemberId(),"CLCS");
        	assertEquals(order.getPrice(),new Double(1.0));
        	assertEquals(order.getTrader().getTraderId(),new Integer(00001));
        }
        
	}
	
	@Test
	public void testCreateAskOrder() throws NamingException {
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        try{
        	requestBean.createAskOrder(50, 1.1, "CLCS", "00002");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
        Trader trader = em.find(Trader.class, new Integer("00002"));
        Collection<AskOrder> askOrders = trader.getAskOrders();
        System.out.println("bidOrders.size() " + askOrders.size());
        assertTrue(askOrders.size() > 0);
       
        Iterator<AskOrder> iter = askOrders.iterator();
        while(iter.hasNext()){
        	AskOrder order = iter.next();
        	assertEquals(order.getAmount(),new Integer(50));
        	assertEquals(order.getMember().getMemberId(),"CLCS");
        	assertEquals(order.getPrice(),new Double(1.1));
        	assertEquals(order.getTrader().getTraderId(),new Integer(00002));
        }
        
	}
	
	@Test
	public void createOrderBookWithSameAmounts() throws NamingException, InterruptedException{	
		//ask and bid order have same amounts
		//remaining amounts should both be 0
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        
        try{
        	bidOrderId = requestBean.createBidOrder(50, 1.0, "CLCS", "00001");
        	askOrderId = requestBean.createAskOrder(50, 1.1, "CLCS", "00002");
        	monitorBean.checkOrderBook("Ian");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
       BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
       AskOrder askOrder = em.find(AskOrder.class, askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Integer(0),bidOrder.getAmount());
		assertEquals(new Integer(0),askOrder.getAmount());
        
		
	}

	
	@Test
	public void createOrderBookWithLowerBidAmount() throws NamingException, InterruptedException{	
		//ask and bid order have same amounts
		//remaining amounts should both be 0
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        
        try{
        	bidOrderId = requestBean.createBidOrder(50, 1.0, "CLCS", "00001");
        	askOrderId = requestBean.createAskOrder(100, 1.1, "CLCS", "00002");
        	monitorBean.checkOrderBook("Ian");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
       BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
       AskOrder askOrder = em.find(AskOrder.class, askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Integer(0),bidOrder.getAmount());
		assertEquals(new Integer(50),askOrder.getAmount());
        
		
	}
	
	@Test
	public void createOrderBookWithHigherBidAmount() throws NamingException, InterruptedException{	
		//ask and bid order have same amounts
		//remaining amounts should both be 0
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        
        try{
        	bidOrderId = requestBean.createBidOrder(200, 1.0, "CLCS", "00001");
        	askOrderId = requestBean.createAskOrder(100, 1.1, "CLCS", "00002");
        	monitorBean.checkOrderBook("Ian");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
       BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
       AskOrder askOrder = em.find(AskOrder.class, askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Integer(100),bidOrder.getAmount());
		assertEquals(new Integer(0),askOrder.getAmount());
        
		
	}
	
	@Test
	public void createOrderBookWithZeroBidAmount() throws NamingException, InterruptedException{	
		//ask and bid order have same amounts
		//remaining amounts should both be 0
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        
        try{
        	bidOrderId = requestBean.createBidOrder(0, 1.0, "CLCS", "00001");
        	askOrderId = requestBean.createAskOrder(0, 1.1, "CLCS", "00002");
        	monitorBean.checkOrderBook("Ian");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
       BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
       AskOrder askOrder = em.find(AskOrder.class, askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Integer(0),bidOrder.getAmount());
		assertEquals(new Integer(0),askOrder.getAmount());
        
		
	}
	
	@Test
	public void createOrderBookWithBidFirst() throws NamingException, InterruptedException{	
		//bid order sets stock price
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        
        try{
        	bidOrderId = requestBean.createBidOrder(50, 1.0, "CLCS", "00001");
        	askOrderId = requestBean.createAskOrder(50, 1.1, "CLCS", "00002");
        	monitorBean.checkOrderBook("Ian");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
       BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
       AskOrder askOrder = em.find(AskOrder.class, askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Double(9950),bidOrder.getTrader().getBalance());
		assertEquals(new Double(10050),askOrder.getTrader().getBalance());
        
		
	}
	
	@Test
	public void createOrderBookWithAskFirst() throws NamingException, InterruptedException{	
		//ask order sets stock price
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        
        try{
        	askOrderId = requestBean.createAskOrder(50, 1.1, "CLCS", "00002");
        	bidOrderId = requestBean.createBidOrder(50, 1.0, "CLCS", "00001");
        	monitorBean.checkOrderBook("Ian");
        }
        catch(EJBException e)
        {
        	System.out.println("Caught EJBException" );
        }
        
       BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
       AskOrder askOrder = em.find(AskOrder.class, askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Double(9945),bidOrder.getTrader().getBalance());
		assertEquals(new Double(10055),askOrder.getTrader().getBalance());
        
		
	}
	
	@Test
	public void createConsecutiveOrderBooks() throws NamingException, InterruptedException, NoSuchAlgorithmException, UnsupportedEncodingException{	
		
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        LoginRequest loginRequest = (LoginRequest) ctx.lookup("java:global/classes/LoginRequest");
        assertNotNull(loginRequest);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createMember("TWTN", "Tom", "Watson", 12,5000,10000,123,456,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        
        loginRequest.createUser("ianw", "password12", "",00001);
		loginRequest.createUser("jimmy", "test12", "", 00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        Integer bidOrderId2 = 0;
        Integer askOrderId2 = 0;
        
        bidOrderId = requestBean.createBidOrder(50, 1.0, "CLCS", "00001");
        Thread.sleep(2000);
        askOrderId = requestBean.createAskOrder(50, 1.1, "CLCS", "00002");
        monitorBean.checkOrderBook("Ian");
        
        BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
        AskOrder askOrder = em.find(AskOrder.class, askOrderId);
        
        System.out.println("bidOrderId: " + bidOrderId);
	    System.out.println("askOrderId: " + askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Double(9950),bidOrder.getTrader().getBalance());
		assertEquals(new Double(10050),askOrder.getTrader().getBalance());
		
		//second
		Thread.sleep(2000);
		bidOrderId = requestBean.createBidOrder(50, 1.2, "CLCS", "00001");
		Thread.sleep(2000);
        askOrderId = requestBean.createAskOrder(50, 1.3, "CLCS", "00002");
        monitorBean.checkOrderBook("Ian");
        
        User user = em.find(User.class, "jimmy");
		Trader trader = em.find(Trader.class, user.getTrader().getTraderId());
		em.refresh(trader);
		assertEquals(new Double(10110),trader.getBalance());
		
		user = em.find(User.class, "ianw");
		trader = em.find(Trader.class, user.getTrader().getTraderId());
		em.refresh(trader);
		assertEquals(new Double(9890),trader.getBalance());
		
       		
	}
	
	//TODO: Test when we try to buy more than we can afford that bid balance is not debited
			//Try to purchase 50000 shares in CLCS then sell 50
			//problem: warning for trying to buy 50000 when only 50 is sold - should warn for total  bought  only (e.g. 50)

	@Test
	public void buyAmountHigherThanBalance() throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException, InterruptedException
	{
		RequestBean requestBean = (RequestBean) ctx.lookup("java:global/classes/RequestBean");
        assertNotNull(requestBean);
        
        OrderMonitorBean monitorBean = (OrderMonitorBean) ctx.lookup("java:global/classes/OrderMonitorBean");
        assertNotNull(monitorBean);
        
        LoginRequest loginRequest = (LoginRequest) ctx.lookup("java:global/classes/LoginRequest");
        assertNotNull(loginRequest);
        
        requestBean.createParliament("WST100");
        requestBean.createParty("LAB", "Labour", 0, "WST100");
        requestBean.createMember("CLCS", "Caroline", "Lucas", 20,3000,10000,345,123,"LAB");
        requestBean.createMember("TWTN", "Tom", "Watson", 12,5000,10000,123,456,"LAB");
        requestBean.createTrader(00001,"Ian",10000.00,00001);
        requestBean.createTrader(00002,"Jimmy",10000.00,00002);
        Portfolio p1 = requestBean.createPortfolio(0,"CLCS",00002); //FIXME: may have to tear down database
		Portfolio p2 = requestBean.createPortfolio(0,"TWTN",00002);
        requestBean.addPortfolio(00002,p1.getPortfolioId(),100);
		requestBean.addPortfolio(00002, p2.getPortfolioId(),100);
        
        loginRequest.createUser("ianw", "password12", "",00001);
		loginRequest.createUser("jimmy", "test12", "", 00002);
        
        Integer bidOrderId = 0;
        Integer askOrderId = 0;
        Integer bidOrderId2 = 0;
        Integer askOrderId2 = 0;
        
        bidOrderId = requestBean.createBidOrder(50000, 1.0, "CLCS", "00001");
        Thread.sleep(2000);
        askOrderId = requestBean.createAskOrder(50, 1.1, "CLCS", "00002");
        monitorBean.checkOrderBook("Ian");
        
        BidOrder bidOrder = em.find(BidOrder.class, bidOrderId);
        AskOrder askOrder = em.find(AskOrder.class, askOrderId);
        
        System.out.println("bidOrderId: " + bidOrderId);
	    System.out.println("askOrderId: " + askOrderId);
              
		assertNotNull(bidOrder);
		assertNotNull(askOrder);
		assertEquals(new Double(9950),bidOrder.getTrader().getBalance());
		assertEquals(new Double(10050),askOrder.getTrader().getBalance());
		
		//check amount
		Trader bidTrader = em.find(Trader.class, new Integer(00001));
		Trader askTrader = em.find(Trader.class, new Integer(00002));
		
		Collection<Portfolio> bidPortfolios = bidTrader.getPortfolios();
		Collection<Portfolio> askPortfolios = askTrader.getPortfolios();
		
		System.out.println(bidPortfolios.size());
		System.out.println(askPortfolios.size());
		
		Iterator<Portfolio> iter = bidPortfolios.iterator();
		Integer bidBalance = iter.next().getBalance();
		assertEquals(new Integer(50), bidBalance);
		
		Iterator<Portfolio> iter2 = askPortfolios.iterator();
		Integer askBalance = iter2.next().getBalance();
		assertEquals(new Integer(50), askBalance);
		
	}

}
