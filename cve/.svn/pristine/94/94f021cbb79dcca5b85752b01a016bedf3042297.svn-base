package politse.entity;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.TemporalType.TIMESTAMP;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.enterprise.inject.Model;
import javax.persistence.CollectionTable;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.MapKeyColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;

import org.eclipse.persistence.annotations.Cache;


@Entity
@Table(name="Trader")
@NamedQuery(
    name="findAllTraders",
    query="SELECT t FROM Trader t " +
          "ORDER BY t"
)


public class Trader {
	
	@Id
    private Integer traderId;
    private char status;
    @Temporal(TIMESTAMP)
    private Date lastUpdate;
    private Double balance;
    private String forename;
	private Collection<AskOrder> askOrders;
	private Collection<BidOrder> bidOrders;
	private User user;
	private Collection<Portfolio> portfolios;
	private static final Logger logger = Logger.getLogger("politse.ejb.Trader");
	
	//TODO: hold amount of shares owned for each member work out via askorder and bidorder amounts(?)
   

	public Trader() {
        this.lastUpdate = new Date();
    }
    
    public Trader(Integer traderId, String forename, Double balance, Portfolio portfolio) {
        this.traderId = traderId;
        this.lastUpdate = new Date();
        this.balance = balance;
        this.forename = forename;
        this.askOrders = new ArrayList<>();
        this.bidOrders = new ArrayList<>();
        this.portfolios = new ArrayList<>();
     
        logger.log(Level.INFO, "Trader Ctor");
        
    }
    
    
	public Integer getTraderId() {
		return traderId;
	}
	public void setTraderId(Integer traderId) {
		this.traderId = traderId;
	}
	public char getStatus() {
		return status;
	}
	public void setStatus(char status) {
		this.status = status;
	}
	public Date getLastUpdate() {
		return lastUpdate;
	}
	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}
	public Double getBalance() {
		return balance;
	}
	public void setBalance(Double balance) {
		this.balance = balance;
	}
	
	 @OneToMany(cascade=ALL, mappedBy="trader")
	    public Collection<AskOrder> getAskOrders() 
	    {
	        return askOrders;
	    }
	    
	    public void setAskOrders(Collection<AskOrder> askOrders)
	    {
	    	this.askOrders = askOrders;
	    }
    
	    @OneToMany(cascade=ALL, mappedBy="trader")
	    public Collection<BidOrder> getBidOrders() 
	    {
	        return bidOrders;
	    }
	    
	    public void setBidOrders(Collection<BidOrder> bidOrders)
	    {
	    	this.bidOrders = bidOrders;
	    }
	    
	    @OneToOne(cascade=ALL, mappedBy="trader")
	    public User getUser() 
	    {
	        return user;
	    }
	    
	    public void setUser(User user)
	    {
	    	this.user = user;
	    }
	    
	    @OneToMany(cascade=ALL, mappedBy="trader")
		public Collection<Portfolio> getPortfolios() {
			return portfolios;
		}
	    
		public void setPortfolios(Collection<Portfolio> portfolios) {
			this.portfolios = portfolios;
		}
		
		public void addPortfolio(Portfolio portfolio)
		{
			portfolios.add(portfolio);
		}
		
		public void addBidOrder(BidOrder bidOrder)
		{
			bidOrders.add(bidOrder);
		}
		
		public void addAskOrder(AskOrder askOrder)
		{
			askOrders.add(askOrder);
		}
    
}
