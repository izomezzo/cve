package politse.entity;

import static javax.persistence.TemporalType.TIMESTAMP;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.PostLoad;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;

import org.eclipse.persistence.annotations.Cache;
import org.primefaces.push.EventBus;
import org.primefaces.push.EventBusFactory;

import politse.util.Constants;

@IdClass(OrderBookKey.class)
@Entity
@Table(name="OrderBook")
@NamedQueries({
@NamedQuery(
    name="findAllOrderBooks",
    query=	"SELECT o FROM OrderBook o " +
	    	"ORDER BY o.lastUpdate ASC"
),
//should find the latest price only of a distinct member
@NamedQuery(
	    name="findLatestPrices",
	    query="SELECT DISTINCT ao.member FROM OrderBook ob " +
	    	  "INNER JOIN AskOrder ao " + 
	    	  "INNER JOIN BidOrder bo " +
	    	  "ORDER BY ob.lastUpdate"
),

@NamedQuery(
	name="findOrderByBid",
	query="SELECT bo FROM BidOrder bo " + 
	"WHERE bo.member = :member"	
),

@NamedQuery(
		name="findOrderByAsk",
		query="SELECT ao FROM AskOrder ao " + 
		"WHERE ao.member = :member"	
	),

@NamedQuery(
		name="findPriceByMember",
		query="SELECT ob FROM OrderBook ob " +
		"INNER JOIN AskOrder ao " +
		"WHERE ao.member = :member " +
		"ORDER BY ob.lastUpdate DESC"
		)

})


public class OrderBook implements java.io.Serializable {

	private static final Logger logger = Logger.getLogger("politse.entity.OrderBook");
	private static final long serialVersionUID = -5908845608956132632L;
	private char status;
	private Date lastUpdate;
	private AskOrder askOrderId;
	private BidOrder bidOrderId;
	private Double price;  

	public OrderBook()
	{
		this.lastUpdate = new Date();
	}
	
	public OrderBook(BidOrder bidOrder, AskOrder askOrder)
	{
		this.lastUpdate = new Date();
		this.askOrderId = askOrder;
		this.bidOrderId = bidOrder;
	}
	  
	@Temporal(TIMESTAMP)
	public Date getLastUpdate() {
		return lastUpdate;
	}
	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}
	
	public char getStatus() {
		return status;
	}
	
	public void setStatus(char status) {
		this.status = status;
	}
	
	
	@Id
	@JoinColumn(nullable=false)
	@OneToOne
	public BidOrder getBidOrderId() {
        return bidOrderId;
    }

	public void setBidOrderId(BidOrder bidOrder) {
		this.bidOrderId = bidOrder;
	}
	
	@Id
	@JoinColumn(nullable=false)
	@OneToOne
	public AskOrder getAskOrderId() {
        return askOrderId;
    }

	public void setAskOrderId(AskOrder askOrder) {
		this.askOrderId = askOrder;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}
	  
	@PostPersist
	public void postPersist(){
		
		/*if(!Constants.ISTEST){
    		EventBus eventBus = EventBusFactory.getDefault().eventBus();
    		eventBus.publish("/notify", "price");
    		
    		logger.log(Level.INFO, "OrderBook.postPersist: Notify price fired");
    	}*/
		logger.log(Level.INFO,"OrderBook persisted askorder {0}",new Object[]{this.askOrderId.getOrderId()});
		logger.log(Level.INFO,"OrderBook persisted bidorder {0}",new Object[]{this.bidOrderId.getOrderId()});
	}
	
	/*@PostUpdate
	public void postUpdate(){
		if(!Constants.ISTEST){
    		EventBus eventBus = EventBusFactory.getDefault().eventBus();
    		eventBus.publish("/notify", "price");
    		
    		logger.log(Level.INFO, "OrderBook.postUpdate: Notify price fired");
    	}
	}*/
}
