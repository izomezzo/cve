package politse.entity;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.TemporalType.TIMESTAMP;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;

import org.eclipse.persistence.annotations.Cache;

@Entity
@Table(name="User")
@NamedQuery(
    name="findUser",
    query="SELECT u FROM User u " +
    	  "WHERE u.userId = :username"
)

public class User implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -4471707268842028680L;
	@Id
	private String userId;
	@Temporal(TIMESTAMP)
    private Date lastUpdate;
	private String password;
	private String salt;
	private Trader trader;
	
	public User()
	{
		this.lastUpdate = new Date();
	}
	
	public User(String userId, String password, String salt, Trader trader) throws NoSuchAlgorithmException, UnsupportedEncodingException
	{
		this.setUserId(userId);
		this.setPassword(password);
		this.setSalt(salt);
		this.setTrader(trader);
		this.lastUpdate = new Date();
	}
	
	public String getUserId() {
		return userId;
	}
	public void setUserId(String userId) {
		this.userId = userId;
	}
	public Date getLastUpdate() {
		return lastUpdate;
	}
	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
		
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		md.update(password.getBytes("UTF-8"));
		byte byteData[] = md.digest();
		//convert the byte to hex format
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
         sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
		
		this.password = sb.toString();
	}
	public String getSalt() {
		return salt;
	}
	public void setSalt(String salt) {
		this.salt = salt;
	}
	
	@OneToOne(cascade=ALL, mappedBy="user")
	public Trader getTrader() {
		return trader;
	}
	public void setTrader(Trader trader) {
		this.trader = trader;
	}
	
	

}
