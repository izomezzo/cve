package politse.web;

import java.io.Serializable;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.inject.Inject;

import org.primefaces.push.EventBus;
import org.primefaces.push.EventBusFactory;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;

import politse.entity.BidOrder;
import politse.entity.Member;
import politse.entity.OrderBook;
import politse.entity.Portfolio;
import politse.entity.Trader;
import politse.entity.User;
import politse.util.PortfolioException;

@ManagedBean
@SessionScoped
public class StocksView implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 444800819325471815L;
	private static final Logger logger = Logger.getLogger("politse.web.StocksView");
	@EJB
    private politse.ejb.RequestBean request;
	private OrderBook selectedStock;
	private List<OrderBook> latestPricesResults;
	private Integer bidAmount;
	private Double bidPrice;
	private Integer askAmount;
	private Double askPrice;
	private User user;
	private String userId;
	private Collection<Portfolio> portfolios;
	@EJB
	private politse.ejb.OrderMonitorBean monitor;
	private Map<String,Boolean> hasPortfolios;
	@Inject
	private politse.web.GrowlView growl;

	@PostConstruct
    public void postInit() {
      logger.log(Level.INFO,"Session started");
      ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
      Map<String, Object> sessionMap = externalContext.getSessionMap();
      
      user = (User) sessionMap.get("user");
      userId = user.getUserId();
      logger.log(Level.INFO, "user trader is: {0}", 
    		  new Object[]{user.getTrader().getTraderId().toString()});
   
      hasPortfolios();
    }
	
	public void showGrowl(){
		
		logger.log(Level.INFO, "StocksView.showGrowl");
		Collection<Portfolio> portfolios = request.findPortfoliosByTrader(user.getTrader().getTraderId().toString());
		Iterator<Portfolio> iter = portfolios.iterator();
		
		if(!portfolios.isEmpty()){
			Portfolio portfolio = iter.next(); //should be first portfolio
		
		EventBus eventBus = EventBusFactory.getDefault().eventBus();
        eventBus.publish(userId, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info","Portfolio balance is now " 
		+ portfolio.getBalance().toString() + " for stock " + portfolio.getMember().getMemberId()));
		}
	}
	
	public void hasPortfolios(){
		
		logger.log(Level.INFO, "hasPortfolios start");
		
		 hasPortfolios = new HashMap<String,Boolean>();
	      portfolios = request.findPortfoliosByTrader(user.getTrader().getTraderId().toString());
	      logger.log(Level.INFO, "user getTrader is: {0}", 
	    		  new Object[]{user.getTrader().getTraderId().toString()});
			Iterator<Portfolio> iter = portfolios.iterator();
			while(iter.hasNext()){
				Portfolio p = iter.next();
				if(p.getBalance() == 0){
					hasPortfolios.put(p.getMember().getMemberId(),new Boolean(false));
					logger.log(Level.INFO, "hasPortfolios false");
				}
				else
				{
					hasPortfolios.put(p.getMember().getMemberId(),new Boolean(true));
					logger.log(Level.INFO, "hasPortfolios true");
				}
			}
	}


	public void findLatestPrices(){
		
		setLatestPricesResults(request.findLatestPrices()); 
	}
	
	public void submitBidOrder() {
		
		logger.log(Level.INFO, "StocksView.submitOrder");
		
        try {
	            request.createBidOrder(bidAmount, bidPrice,
	            		getSelectedStock().getBidOrderId().getMember().getMemberId(), 
	            			user.getTrader().getTraderId().toString());
	            logger.log(Level.INFO, "Created new bid order with bidprice ID {0}", 
	                    new Object[]{bidPrice});
	            
	            checkOrders();
           
        } catch (Exception e) {
            logger.warning("Problem creating order in submitBidOrder.");
            logger.warning(e.getMessage());
        }
        
    }
	
	public void submitAskOrder() throws PortfolioException {
		 
		 logger.log(Level.INFO, "submitAskOrder");
	        	
	        		request.createAskOrder(askAmount, askPrice, getSelectedStock().getBidOrderId().getMember().getMemberId(), 
	        				user.getTrader().getTraderId().toString());
	        		logger.log(Level.INFO, "Created new ask order with askprice ID {0}",                 
	        				new Object[]{askPrice});
	      
	        		checkOrders();
	    }
	

	public void checkOrders()
	 {
		 monitor.checkOrderBook(user.getUserId());
		 logger.log(Level.INFO, "StocksView.checkOrders ");
	 }
	
	public List<OrderBook> getLatestPricesResults() {
		return latestPricesResults;
	}

	public void setLatestPricesResults(List<OrderBook> latestPricesResults) {
		this.latestPricesResults = latestPricesResults;
	}
	
	public OrderBook getSelectedStock() {
		
		logger.log(Level.INFO, "StocksView.getSelectedStock returned selectStock to {0}",  
        		new Object[]{selectedStock});
		
        return selectedStock;
    }
 
    public void setSelectedStock(OrderBook selectedStock) {
        
    	this.selectedStock = selectedStock;
        
        logger.log(Level.INFO, "StocksView.setSelectedStock set this.selectStock to {0}",  
        		new Object[]{this.selectedStock});
    }
	
	public Map<String,Boolean> getHasPortfolios() {
		
		try{
		logger.log(Level.INFO, "StocksView.getHasPortfolios boolean:  {0}",  
        		new Object[]{hasPortfolios.get("CLCS")});
		logger.log(Level.INFO, "StocksView.getHasPortfolios use:  {0}",  
        		new Object[]{user.getUserId()});
		}catch(NullPointerException e){logger.log(Level.INFO, "StocksView.getHasPortfolios caught NPE");}
		
		
		return hasPortfolios;
	}

	public void setHasPortfolios(Map<String,Boolean> hasPortfolios) {
		this.hasPortfolios = hasPortfolios;
	}
	
	public Integer getBidAmount() {
		return bidAmount;
	}

	public void setBidAmount(Integer bidAmount) {
		this.bidAmount = bidAmount;
		
		logger.log(Level.INFO, "StocksView.setBidAmount"); 
	}
	
	public Integer getAskAmount() {
		return askAmount;
	}

	public void setAskAmount(Integer askAmount) {
		this.askAmount = askAmount;
	}
	
	public Double getBidPrice() {
		return bidPrice;
	}

	public void setBidPrice(Double bidPrice) {
		this.bidPrice = bidPrice;
	}

	public Double getAskPrice() {
		return askPrice;
	}

	public void setAskPrice(Double askPrice) {
		this.askPrice = askPrice;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

}
