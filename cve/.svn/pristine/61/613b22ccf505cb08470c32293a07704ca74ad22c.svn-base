package politse.ejb;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.ejb.EJBException;
import javax.ejb.Stateful;
import javax.enterprise.context.RequestScoped;
import javax.enterprise.event.Event;
import javax.enterprise.event.Observes;
import javax.enterprise.event.TransactionPhase;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.atmosphere.util.StringEscapeUtils;
import org.primefaces.context.RequestContext;
import org.primefaces.push.EventBus;
import org.primefaces.push.EventBusFactory;

import politse.entity.AskOrder;
import politse.entity.BidOrder;
import politse.entity.Member;
import politse.entity.OrderBook;
import politse.entity.OrderBookKey;
import politse.entity.Parliament;
import politse.entity.Party;
import politse.entity.Portfolio;
import politse.entity.Trader;
import politse.entity.User;
import politse.util.AskOrderEvent;
import politse.util.Constants;
import politse.util.OrderBookEvent;
import politse.util.PortfolioException;
import politse.util.TraderException;


@RequestScoped
@Stateful
public class RequestBean {
	
	 @PersistenceContext
	 private EntityManager em;
	 //private OrderBookManager orderBookManager;
	 @Inject
	 private politse.ejb.OrderBookManager orderBookManager;
	 @Inject
	 Event<OrderBookEvent> event;
	 @Inject
	 Event<AskOrderEvent> askEvent;

	    private static final Logger logger = Logger.getLogger("politse.ejb.RequestBean");
	    
	    public void createParliament(String parliamentId)
	    {
	    	Parliament wst = new Parliament(parliamentId);
	    	em.persist(wst);
	    }
	    
	    public void createParty(String partyId, String name, Integer billsPassed, String parliamentId)
	    {
	    	Party par = new Party(partyId,name,billsPassed,new Parliament(parliamentId));
	    	em.persist(par);
	    }
	    
	    public void createMember(String memberId, String forename, String surname, Integer position, 
	   			 Integer majority, Integer IPO, Integer questions, Integer answers, String partyId)
	    {
	    	Member mem = new Member(memberId, forename, surname, position, 
	    			majority, IPO, questions, answers, new Party(partyId, null, null, null));
	    	
	    	logger.log(Level.INFO, "RequestBean.createMember Created new member with id {0}", 
                    new Object[]{memberId});
	    	logger.log(Level.INFO, "RequestBean.createMember Created new member with forename {0}", 
                    new Object[]{forename});
	    	
	    	em.persist(mem);
	    }
	    
	    public void createTrader(Integer traderId, String forename, Double balance, Integer portfolioId)
	    {
	    	Trader tra = new Trader(traderId, forename, balance, em.find(Portfolio.class,portfolioId));
	    	logger.log(Level.INFO, "RequestBean.createTrader Created new trader with id {0}", 
                    new Object[]{traderId});
	    	
	    	em.persist(tra);
	    	
	    }
	 
	    public Integer createAskOrder(Integer amount, Double price, String memberId, String traderId)
	    {
	    	Trader trader = em.find(Trader.class, new Integer(traderId));
	    	
	    	logger.log(Level.INFO, "RequestBean.createAskOrder memberId {0}", 
                    new Object[]{memberId});
	    	logger.log(Level.INFO, "RequestBean.createAskOrder traderId {0}", 
                    new Object[]{price});
	    	
	    	AskOrder order = new AskOrder(amount,price, em.find(Member.class, memberId), 
	    			em.find(Trader.class, new Integer(traderId)));
	    	logger.log(Level.INFO, "RequestBean.createAskOrder Created new order with askprice {0}", 
                    new Object[]{price});
	    	
	    	em.persist(order);
	    	
	    	trader.addAskOrder(order);
	    	
	    	AskOrderEvent askOrderEvent = new AskOrderEvent(order);
	    	askEvent.fire(askOrderEvent);
	    	logger.log(Level.INFO, "fired askorder event");
	    	
	    	return order.getOrderId();
	    }
	    
	    public Integer createBidOrder(Integer amount, Double price, String memberId, String traderId)
	    {
	    	Trader trader = em.find(Trader.class, new Integer(traderId));
	    	BidOrder order = new BidOrder(amount,price, em.find(Member.class, memberId), 
	    			trader);
	    	logger.log(Level.INFO, "RequestBean.createBidOrder Created new order with bidprice {0}", 
                    new Object[]{price});
	    	em.persist(order);
	    	
	    	trader.addBidOrder(order);

	    	return order.getOrderId();
	    }
	    
	    public Portfolio createPortfolio(Integer balance,String memberId, Integer traderId)
	    {
	    	Portfolio portfolio = new Portfolio(balance,em.find(Member.class,memberId));
	    	em.persist(portfolio);
	    	portfolio.setTrader(em.find(Trader.class,traderId));
	    	
	    	return portfolio;
	    }
	    
	    
	    public void createOrderBook(Integer bidOrderId,Integer askOrderId,String userId) {
	            
	            OrderBook book = new OrderBook(em.find(BidOrder.class,bidOrderId),
	            		em.find(AskOrder.class, askOrderId));
	            
	            logger.log(Level.INFO, "OrderBook found askorder is: {0}", book.getAskOrderId());
	            logger.log(Level.INFO, "OrderBook found bidorder is: {0}", book.getBidOrderId());
	    	
	    	em.persist(book);
	    	
	    	//orderBookManager = new OrderBookManager();
	    	
	    	BidOrder bidOrder = em.find(BidOrder.class,bidOrderId);
	    	Integer bidOrderAmount = bidOrder.getAmount();
	    	
	    	AskOrder askOrder = em.find(AskOrder.class, askOrderId);
	    	Integer askOrderAmount = askOrder.getAmount();
	    	
	    	Integer originalAskAmount = askOrderAmount;
	    	Integer originalBidAmount = bidOrderAmount;
	    	
	    	orderBookManager.setPrice(askOrder, bidOrder, book);
	    	orderBookManager.setAmounts();
	    	orderBookManager.setTraderBalances(book, originalAskAmount, originalBidAmount);
	    	orderBookManager.addPortfolio();
	    	orderBookManager.setPortfolioBalance();
	    	
	    	OrderBookEvent orderBookEvent = new OrderBookEvent();
	    	event.fire(orderBookEvent);
	    	logger.log(Level.INFO, "fired orderbook event");
	    	
	    }
	    
	    public boolean orderBookExists(Integer bidOrderId,Integer askOrderId)
	    {
	    	OrderBookKey orderKey = new OrderBookKey();
            orderKey.setBidOrderId(bidOrderId);
            orderKey.setAskOrderId(askOrderId);
            
	    	OrderBook book = em.find(OrderBook.class, orderKey);
	    	
	    	if(book == null)
	    	{
	    		logger.log(Level.INFO, "orderBookExists false");
	    		return false;
	    	}
	    	else
	    	{
	    		logger.log(Level.INFO, "orderBookExists true");
	    		return true;
	    	}
	    	
	     }
	    
	    public void addMember(String memberId, Integer portfolioId)
	    {
	    	try {
	            Member member = em.find(Member.class, memberId);
	            Portfolio portfolio = em.find(Portfolio.class, portfolioId);	
	            portfolio.addMember(member);
	            member.addPortfolio(portfolio);
	            logger.log(Level.INFO, "RequestBean.addMember");
	        } catch (Exception ex) {
	            throw new EJBException(ex);
	        }
	    }
	    
	    public void addPortfolio(Integer traderId, Integer portfolioId, Integer balance)
	    {
	    	Trader trader = em.find(Trader.class, traderId);
	    	Portfolio portfolio = em.find(Portfolio.class, portfolioId);
	    	portfolio.setTrader(trader);
	    	portfolio.setBalance(balance);
	    	trader.addPortfolio(portfolio);
	    }
	    
	    public Parliament retrieveParliament()
	    {
	    	return em.find(Parliament.class, "WST100");
	    }
	    
	    public Trader findTrader(Integer traderId)
	    {
	    	return em.find(Trader.class,traderId);
	    }
	    
	    
	    public List<Party> findParties() {
	    	
	    	List<Party> parties;
	    	//List<String> partyId;
	    	
	        try {
	            parties = em.createNamedQuery(
	                    "findAllParties")
	                    .getResultList();
	            for (Iterator<Party> it = parties.iterator(); it.hasNext();) {
	                Party party = it.next();	                
	                logger.log(Level.INFO, "Party: {0}", 
		                    party.getPartyId());
	            }
	        } catch (Exception e) {
	            throw new EJBException(e.getMessage());
	        }
	        
	        return parties;
	    }
	    
 public List<Parliament> findParliaments() {
	    	
	    	List<Parliament> parliaments;
	    	
	        try {
	            parliaments = em.createNamedQuery(
	                    "findAllParliaments")
	                    .getResultList();
	            for (Iterator<Parliament> it = parliaments.iterator(); it.hasNext();) {
	                Parliament parliament = it.next();	                
	                logger.log(Level.INFO, "Party: {0}", 
		                    parliament.getParliamentId());
	            }
	        } catch (Exception e) {
	            throw new EJBException(e.getMessage());
	        }
	        
	        return parliaments;
	    }
 
 public List<Member> findMembers() {
 	
 	List<Member> members;
 	
     try {
         members = em.createNamedQuery(
                 "findAllMembers")
                 .getResultList();
         for (Iterator<Member> it = members.iterator(); it.hasNext();) {
             Member member = it.next();	                
             logger.log(Level.INFO, "Member ID : {0}", 
	                    member.getMemberId());
             logger.log(Level.INFO, "Member Forename: {0}", 
	                    member.getForename());
         }
     } catch (Exception e) {
         throw new EJBException(e.getMessage());
     }
     
     return members;
 }

 public List<Trader> findAllTraders() {
	 	
	 	List<Trader> traders;
	 	
	     try {
	         traders = em.createNamedQuery(
	                 "findAllTraders")
	                 .getResultList();
	         for (Iterator<Trader> it = traders.iterator(); it.hasNext();) {
	             Trader trader = it.next();	                
	             logger.log(Level.INFO, "Trader ID : {0}", 
		                    trader.getTraderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return traders;
	 }

 public List<BidOrder> findOrderByBid() {
	 	
	 	List<BidOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findOrderByBid")
	                 .getResultList();
	         for (Iterator<BidOrder> it = orders.iterator(); it.hasNext();) {
	             BidOrder order = it.next();	                
	             logger.log(Level.INFO, "bidorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
 
 public List<AskOrder> findOrderByAsk() {
	 	
	 	List<AskOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findOrderByAsk")
	                 .getResultList();
	         for (Iterator<AskOrder> it = orders.iterator(); it.hasNext();) {
	        	 AskOrder order = it.next();	                
	             logger.log(Level.INFO, "askorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
 
 public List<AskOrder> findAllAskOrders() {
	 	
	 	List<AskOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findAllAskOrders")
	                 .getResultList();
	         for (Iterator<AskOrder> it = orders.iterator(); it.hasNext();) {
	        	 AskOrder order = it.next();	                
	             logger.log(Level.INFO, "askorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
 
 public List<AskOrder> findAskOrdersByTrader(Trader trader) {
	 	
	 	List<AskOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findAskOrdersByTrader").setParameter("trader", trader)
	                 .getResultList();
	         for (Iterator<AskOrder> it = orders.iterator(); it.hasNext();) {
	        	 AskOrder order = it.next();	                
	             logger.log(Level.INFO, "askorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
 
 public List<AskOrder> findActiveAskOrdersByTrader(Trader trader) { //only get askorders that have a price
	 	
	 	List<AskOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findActiveAskOrdersByTrader").setParameter("trader", trader)
	                 .getResultList();
	         for (Iterator<AskOrder> it = orders.iterator(); it.hasNext();) {
	        	 AskOrder order = it.next();	                
	             logger.log(Level.INFO, "active askorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
 
 public List<BidOrder> findBidOrdersByTrader(Trader trader) {
	 	
	 	List<BidOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findBidOrdersByTrader").setParameter("trader", trader)
	                 .getResultList();
	         for (Iterator<BidOrder> it = orders.iterator(); it.hasNext();) {
	        	 BidOrder order = it.next();	                
	             logger.log(Level.INFO, "bidorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
 
 public List<BidOrder> findAllBidOrders() {
	 	
	 	List<BidOrder> orders;
	 	
	     try {
	         orders = em.createNamedQuery(
	                 "findAllBidOrders")
	                 .getResultList();
	         for (Iterator<BidOrder> it = orders.iterator(); it.hasNext();) {
	        	 BidOrder order = it.next();	                
	             logger.log(Level.INFO, "bidorder ID : {0}", 
		                    order.getOrderId());
	         }
	     } catch (Exception e) {
	         throw new EJBException(e.getMessage());
	     }
	     
	     return orders;
	 }
	    
 		public List<AskOrder> findAskOrdersByMember(Member member, Trader trader) 
 		{
 			logger.log(Level.INFO, "findAskOrdersByMember");
 			logger.log(Level.INFO,"findAskOrdersByMember member: {0} ",member.getMemberId());
 			logger.log(Level.INFO,"findAskOrdersByMember trader: {0} ",trader.getTraderId());
 			
 			List<AskOrder> orders;
 		
 			 try {
 		         orders = em.createNamedQuery(
 		                 "findAskOrdersByMember").setParameter("member", member).setParameter("trader", trader)
 		        		 //.setHint("javax.persistence.cache.storeMode", "REFRESH")
 		                 .getResultList();
 		         for (Iterator<AskOrder> it = orders.iterator(); it.hasNext();) {
 		        	 AskOrder order = it.next();	                
 		             logger.log(Level.INFO, "askorder ID : {0}", 
 			                    order.getOrderId());
 		         }
 		     } catch (Exception e) {
 		         throw new EJBException(e.getMessage());
 		     }
 			 
 			return orders;
 		}
 		
 		public List<Object[]> findOrderBooksPrices(Integer orderId) 
 		{
 			List<Object[]> prices;
 			
 			 try {
 		         prices = em.createNamedQuery(
 		                 "findOrderBooksPrices").setParameter("askOrderId", orderId)
 		        		 .getResultList();
 		        for (Iterator<Object[]> it = prices.iterator(); it.hasNext();) 
 		        {
		        	 Object[] obj = it.next();	                
		             logger.log(Level.INFO, "bidorder price : {0}", 
			                    obj[0]);
		             logger.log(Level.INFO, "askorder price : {0}", 
			                    obj[1]);
		        }
 		     } catch (Exception e) {
 		         throw new EJBException(e.getMessage());
 		     }
 		
 			return prices;
 		}
 		
 		public List<BidOrder> findBidOrderMembers() 
 		{
 			List<BidOrder> members;
 			
 			 try {
 				members = em.createNamedQuery(
 		                 "findBidOrderMembers")
 		                 .getResultList();
 		         for (Iterator<BidOrder> it = members.iterator(); it.hasNext();) {
 		        	 	BidOrder order = it.next();	                
 		        	 	logger.log(Level.INFO, "bidorder ID : {0}", 
 			                    order.getOrderId());
 		         }
 		     } catch (Exception e) {
 		         throw new EJBException("error calling findBidOrderMembers: " + e.getMessage());
 		     }
 			 
 			return members;
 		}
 		
 		public List<AskOrder> findAskOrderMembers() 
 		{
 			List<AskOrder> members;
 			
 			 try {
 		         members = em.createNamedQuery(
 		                 "findAskOrderMembers")
 		                 .getResultList();
 		         for (Iterator<AskOrder> it = members.iterator(); it.hasNext();) {
 		        	 	AskOrder order = it.next();	                
 		        	 	logger.log(Level.INFO, "bidorder member : {0}", 
 			                    order.getMember());
 		         }
 		     } catch (Exception e) {
 		         throw new EJBException(e.getMessage());
 		     }
 			 
 			return members;
 		}
 		
 		public List<OrderBook> findAllOrderBooks()
 		{
 			List<OrderBook> orderBooks;
 			
			 try {
				 orderBooks = em.createNamedQuery(
		                 "findAllOrderBooks")
		                 .getResultList();
		         for (Iterator<OrderBook> it = orderBooks.iterator(); it.hasNext();) {
		        	 OrderBook orderBook = it.next();	                
		        	 	logger.log(Level.INFO, "orderbook askorderid : {0}", 
			                    orderBook.getAskOrderId());
		        	 	logger.log(Level.INFO, "orderbook bidorderid : {0}", 
			                    orderBook.getBidOrderId());
		        	 	logger.log(Level.INFO, "orderbook price : {0}", 
			                    orderBook.getPrice());
		         }
		     } catch (Exception e) {
		         throw new EJBException(e.getMessage());
		     }
			 
			return orderBooks;
 		}
 		
 		public List<OrderBook> findPriceByMember(Integer memberId)
 		{
 			List<OrderBook> orderBooks;
 			
			 try {
				 orderBooks = em.createNamedQuery(
		                 "findPriceByMember")
		                 .getResultList();
		         for (Iterator<OrderBook> it = orderBooks.iterator(); it.hasNext();) {
		        	 OrderBook orderBook = it.next();	                
		        	 	logger.log(Level.INFO, "orderbook price : {0}", 
			                    orderBook.getPrice());
		         }
		     } catch (Exception e) {
		         throw new EJBException(e.getMessage());
		     }
			 
			return orderBooks;
 		}

		public List<OrderBook> findLatestPrices() {
			List<OrderBook> orderBooks;
			List<OrderBook> orderBooksFiltered;
			
			//add to map each orderbook,member pair no dups will be allowed
			//then get those orderbooks and return them in a list
			//member will need to be the key
			
			Map<Member, OrderBook> map = new LinkedHashMap<Member, OrderBook>();
			//em.getEntityManagerFactory().getCache().evictAll();
			//em.clear();
			 try {
				 orderBooks = em.createNamedQuery(
		                 "findAllOrderBooks")//.setHint("javax.persistence.cache.storeMode", "REFRESH")
		                 .getResultList();
		         for (Iterator<OrderBook> it = orderBooks.iterator(); it.hasNext();) {
		        	 OrderBook orderBook = it.next();
		        	 Member member = orderBook.getBidOrderId().getMember();
		        	 map.put(member, orderBook);
		        	 
		        	 	logger.log(Level.INFO, "findLatestPrices orderbook price : {0}", 
			                    orderBook.getPrice());
		        	 	logger.log(Level.INFO, "findLatestPrices orderbook bidorder member : {0}", 
			                    orderBook.getBidOrderId().getMember().getMemberId());
		        	 	logger.log(Level.INFO, "findLatestPrices orderbook lastupdate : {0}", 
			                    orderBook.getLastUpdate());
		         }
		         
		         orderBooksFiltered = new ArrayList<OrderBook>();
		         Iterator<Map.Entry<Member, OrderBook>> entries = map.entrySet().iterator();
		         while (entries.hasNext()) {
		             Map.Entry<Member, OrderBook> entry = entries.next();
		             System.out.println("Key = " + entry.getKey().getMemberId() + ", Value = " + entry.getValue().getPrice());
		             logger.log(Level.INFO, "findLatestPrices key: {0}", 
			                    entry.getKey().getMemberId());
		             logger.log(Level.INFO, "findLatestPrices value: {0}", 
			                    entry.getValue().getPrice());
		             
		             orderBooksFiltered.add(entry.getValue());
		         }
		         
		       
		     } catch (Exception e) {
		         throw new EJBException(e.getMessage());
		     }
			 
			 //debug
			 logger.log(Level.INFO, "findLatestPrices orderBooksFiltered size: {0}", 
	                    orderBooksFiltered.size());
			 Iterator<OrderBook> iter = orderBooksFiltered.iterator();
			 while(iter.hasNext()){
				 OrderBook orderBook = iter.next();
				 logger.log(Level.INFO, "findLatestPrices orderBooksFiltered price: {0}", 
		                    orderBook.getPrice());
				 logger.log(Level.INFO, "findLatestPrices orderBooksFiltered member: {0}", 
	                    orderBook.getAskOrderId().getMember().getMemberId());
			 }
			return orderBooksFiltered;
		}
		
		public Collection<Portfolio> findPortfoliosByTrader(String traderId) {
			
			logger.log(Level.INFO, "findPortfoliosByTrader: traderId: {0}", traderId);
			
			Collection<Portfolio> portfolios;
			Trader trader = em.find(Trader.class,new Integer(traderId));
			
			 try {
				 portfolios = em.createNamedQuery(
		                 "findPortfolioByTrader").setParameter("trader", trader)
		                 .getResultList();
		       
		     } catch (Exception e) {
		         throw new EJBException(e.getMessage());
		     }	 
			 
			return portfolios;
		}
		
		
		public Portfolio findPortfolioBalance(String memberId, String traderId) throws PortfolioException
		{
			logger.log(Level.INFO, "findPortfolioBalance memberId: {0}", 
					memberId);
			logger.log(Level.INFO, "findPortfolioBalance traderId: {0}", 
					traderId);
			
			if(memberId == null)
				throw new PortfolioException("Portfolio for member does not exist");
			
			 Portfolio portfolio = (Portfolio) em.createNamedQuery(
	                 "findPortfolioByMember").setParameter("member", em.find(Member.class,memberId))
					 .setParameter("trader", em.find(Trader.class, new Integer(traderId)))
	                 .getSingleResult();
			 
			 return portfolio;
		}
		
		public void addUserToTrader(String userId, Integer traderId)
		{
			 User user = em.find(User.class, userId);
			 Trader trader = em.find(Trader.class,traderId);
			 trader.setUser(user);
		}
		
		public void onOrderBookCommitted(@Observes(during=TransactionPhase.AFTER_SUCCESS) OrderBookEvent orderBook)
		{
			logger.log(Level.INFO, "onorderBookCommitted");
			
			if(!Constants.ISTEST){
	    		EventBus eventBus = EventBusFactory.getDefault().eventBus();
	    		eventBus.publish("/notify", "price");
	    		
	    		logger.log(Level.INFO, "RequestBean.onOrderBookCommitted: Notify price fired");
	    	}
		}
		
		public void onAskOrderCommitted(@Observes(during=TransactionPhase.AFTER_SUCCESS) AskOrderEvent askOrder)
		{
			logger.log(Level.INFO, "onAskOrderCommitted");
			
			if(!Constants.ISTEST){
	    		EventBus eventBus = EventBusFactory.getDefault().eventBus();
	    		eventBus.publish("/order/" + askOrder.getAskOrder().getTrader().getUser().getUserId(), "askOrder");
	    		
	    		logger.log(Level.INFO, "RequestBean.onAskOrderCommitted: event fired");
	    	}
		}

}
